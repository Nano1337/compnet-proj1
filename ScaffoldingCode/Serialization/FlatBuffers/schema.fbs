// Author: Aniruddha Gokhale, Vanderbilt University
// Created: Sept 2021 for Distributed Systems course
// Modified: Fall 2022 for Computer Networking course
//
// IDL schema for the data type we will be transferring

// For our assignment, we will be defining some application-level
// message formats, just like HTTP has GET, PUT, POST etc. 
//
// We have to define a namespace under which this schema gets
// translated to the programming language we are using.
// Let us call it CustomAppProto

namespace CustomAppProto;

// define the user-defined type that we want to serialize
// This can be arbitrarily complex. Here we show a sample
// which is not overly complex but still showcases the features
//
// In your case this structure will be whatever is the data structure
// that holds the information that the producer will send to consumer

// The data structure is defined using the keyword table as shown. The
// variable name  is my choice.  Individual fields of the data structure
// use the form <variable name: data type>. Note, this can be nested, and
// there could be multiple such data structures defined.


namespace CustomAppProto;

// Author: Aniruddha Gokhale, Vanderbilt University
// Created: Sept 2021 for Distributed Systems course
// Modified: Fall 2022 for Computer Networking course

enum MessageType : byte {
   ORDER,
   HEALTH,
   RESPONSE
}

enum MilkType : byte {
   ONE_PERCENT,
   TWO_PERCENT,
   FAT_FREE,
   WHOLE,
   ALMOND,
   CASHEW,
   OAT
}

enum BreadType : byte {
   WHOLE_WHEAT,
   PUMPERNICKEL,
   RYE,
   BARLEY,
}

enum MeatType : byte {
   BEEF,
   CHICKEN,
   PORK,
   TURKEY,
   LAMB,
}

enum DispenserStatus : byte {
   OPTIMAL,
   PARTIAL,
   BLOCKAGE
}

enum DeviceStatus : byte {
   GOOD,
   BAD
}

enum ResponseCode : byte {
   OK,
   BAD_REQUEST
}

table Milk {
   type: MilkType;
   quantity: float; // in gallons
}

table Bread {
   type: BreadType;
   quantity: float; // in loaves or similar unit
}

table Meat {
   type: MeatType;
   quantity: float; // in pounds or similar unit
}

table Veggies {
   tomato: float;
   cucumber: float;
   lettuce: float;
   broccoli: float;
   spinach: float;
   carrots: float;
}

table DrinksCans {
   coke: int; // number of packs
   beer: int;
   lemonade: int;
}

table DrinksBottles {
   sprite: int;
   gingerale: int;
   water: int;
}

table Drinks {
   cans: DrinksCans;
   bottles: DrinksBottles;
}

table Order {
   veggies: Veggies;
   drinks: Drinks;
   milk: [Milk];
   bread: [Bread];
   meat: [Meat];
}

table Health {
   dispenser: DispenserStatus;
   icemaker: int;
   lightbulb: DeviceStatus;
   fridge_temp: int;
   freezer_temp: int;
   sensor_status: DeviceStatus;
   // Additional fields as per imagination
   water_filter: DeviceStatus;
}

table Response {
   code: ResponseCode;
   contents: string;
}

table Message {
   type: MessageType;
   order: Order;
   health: Health;
   response: Response;
}

// indicate what is the top level structure from where the serialization starts.
// The reason we need this is because we may have a very complicated nested
// data structure and so we need to tell the compiler the starting point.

root_type Message;
