# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CustomAppProto

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Health(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Health()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHealth(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Health
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Health
    def Dispenser(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Health
    def Icemaker(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Health
    def Lightbulb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Health
    def FridgeTemp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Health
    def FreezerTemp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Health
    def SensorStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Health
    def WaterFilter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def HealthStart(builder):
    builder.StartObject(7)

def Start(builder):
    HealthStart(builder)

def HealthAddDispenser(builder, dispenser):
    builder.PrependInt8Slot(0, dispenser, 0)

def AddDispenser(builder, dispenser):
    HealthAddDispenser(builder, dispenser)

def HealthAddIcemaker(builder, icemaker):
    builder.PrependInt32Slot(1, icemaker, 0)

def AddIcemaker(builder, icemaker):
    HealthAddIcemaker(builder, icemaker)

def HealthAddLightbulb(builder, lightbulb):
    builder.PrependInt8Slot(2, lightbulb, 0)

def AddLightbulb(builder, lightbulb):
    HealthAddLightbulb(builder, lightbulb)

def HealthAddFridgeTemp(builder, fridgeTemp):
    builder.PrependInt32Slot(3, fridgeTemp, 0)

def AddFridgeTemp(builder, fridgeTemp):
    HealthAddFridgeTemp(builder, fridgeTemp)

def HealthAddFreezerTemp(builder, freezerTemp):
    builder.PrependInt32Slot(4, freezerTemp, 0)

def AddFreezerTemp(builder, freezerTemp):
    HealthAddFreezerTemp(builder, freezerTemp)

def HealthAddSensorStatus(builder, sensorStatus):
    builder.PrependInt8Slot(5, sensorStatus, 0)

def AddSensorStatus(builder, sensorStatus):
    HealthAddSensorStatus(builder, sensorStatus)

def HealthAddWaterFilter(builder, waterFilter):
    builder.PrependInt8Slot(6, waterFilter, 0)

def AddWaterFilter(builder, waterFilter):
    HealthAddWaterFilter(builder, waterFilter)

def HealthEnd(builder):
    return builder.EndObject()

def End(builder):
    return HealthEnd(builder)
